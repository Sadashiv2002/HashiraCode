import java.math.BigInteger;
import java.util.*;

public class PolynomialReconstruction {

    static class Point {
        int x;
        BigInteger y;

        Point(int x, BigInteger y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return "(" + x + ", " + y + ")";
        }
    }
    static BigInteger parseValueSafely(String value, int base) {
        try {
            return new BigInteger(value, base);
        } catch (Exception e) {
            return null;
        }
    }
    static BigInteger lagrangeInterpolation(List<Point> points) {
        BigInteger result = BigInteger.ZERO;
        int k = points.size();

        for (int i = 0; i < k; i++) {
            BigInteger xi = BigInteger.valueOf(points.get(i).x);
            BigInteger yi = points.get(i).y;

            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    BigInteger xj = BigInteger.valueOf(points.get(j).x);
                    numerator = numerator.multiply(xj.negate());
                    denominator = denominator.multiply(xi.subtract(xj));
                }
            }

            BigInteger li = numerator.divide(denominator);
            result = result.add(yi.multiply(li));
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<Point> points = new ArrayList<>();

        System.out.print("Enter number of shares (n): ");
        int n = sc.nextInt();

        System.out.print("Enter threshold (k): ");
        int k = sc.nextInt();

        System.out.println("Now, enter " + n + " shares (x, base, value):");

        int entered = 0;
        while (entered < n) {
            try {
                System.out.println("\nShare #" + (entered + 1));
                System.out.print("x-coordinate (e.g., 1, 2, 3...): ");
                int x = sc.nextInt();
                sc.nextLine(); // consume newline

                System.out.print("Base (between 2 and 36): ");
                int base = Integer.parseInt(sc.nextLine().trim());
                if (base < 2 || base > 36) {
                    System.out.println("Invalid base. Skipping this share.");
                    continue;
                }

                System.out.print("Value (in given base): ");
                String value = sc.nextLine().trim();

                BigInteger y = parseValueSafely(value, base);
                if (y == null) {
                    System.out.println("Invalid value for base " + base + ". Skipping this share.");
                    continue;
                }

                points.add(new Point(x, y));
                entered++;

            } catch (Exception e) {
                System.out.println("Invalid input. Try again.");
                sc.nextLine(); 
            }
        }

        if (points.size() < k) {
            System.out.println("Error: Not enough valid points to reconstruct the secret (need at least " + k + ").");
            return;
        }

        points.sort(Comparator.comparingInt(p -> p.x));
        List<Point> selected = points.subList(0, k);

        System.out.println("\n Using shares:");
        for (Point p : selected) {
            System.out.println(p);
        }

        BigInteger secret = lagrangeInterpolation(selected);
        System.out.println("\n Reconstructed Secret (f(0)) = " + secret);
    }
}
